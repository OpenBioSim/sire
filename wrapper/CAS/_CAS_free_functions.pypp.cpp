// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "_CAS_free_functions.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireCAS/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressionbase.h"

#include "functions.h"

#include "identities.h"

#include "values.h"

#include "exbase.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireCAS/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressionbase.h"

#include "functions.h"

#include "identities.h"

#include "values.h"

#include "exbase.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireCAS/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressionbase.h"

#include "functions.h"

#include "identities.h"

#include "values.h"

#include "exbase.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireCAS/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressionbase.h"

#include "functions.h"

#include "identities.h"

#include "values.h"

#include "exbase.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireCAS/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressionbase.h"

#include "functions.h"

#include "identities.h"

#include "values.h"

#include "exbase.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireCAS/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressionbase.h"

#include "functions.h"

#include "identities.h"

#include "values.h"

#include "exbase.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireCAS/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressionbase.h"

#include "functions.h"

#include "identities.h"

#include "values.h"

#include "exbase.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireCAS/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressionbase.h"

#include "functions.h"

#include "identities.h"

#include "values.h"

#include "exbase.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireCAS/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressionbase.h"

#include "functions.h"

#include "identities.h"

#include "values.h"

#include "exbase.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireCAS/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressionbase.h"

#include "functions.h"

#include "identities.h"

#include "values.h"

#include "exbase.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireCAS/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressionbase.h"

#include "functions.h"

#include "identities.h"

#include "values.h"

#include "exbase.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireCAS/errors.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressionbase.h"

#include "functions.h"

#include "identities.h"

#include "values.h"

#include "exbase.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireMaths/complex.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "complexvalues.h"

#include "exbase.h"

#include "expression.h"

#include "expressions.h"

#include "functions.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "product.h"

#include "sum.h"

#include "symbol.h"

#include "symbols.h"

#include "values.h"

#include "expression.h"

#include "SireBase/numberproperty.h"

#include "SireCAS/expressionproperty.h"

#include "SireCAS/values.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "expressionproperty.h"

#include "expressionproperty.h"

#include "SireBase/numberproperty.h"

#include "SireCAS/expressionproperty.h"

#include "SireCAS/values.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "expressionproperty.h"

#include "expressionproperty.h"

void register_free_functions(){

    { //::cbrt
    
        typedef double ( *cbrt_function_type )( double );
        cbrt_function_type cbrt_function_value( &::cbrt );
        
        bp::def( 
            "cbrt"
            , cbrt_function_value
            , ( bp::arg("__x") )
            , "Return the cube root of X." );
    
    }

    { //::SireCAS::cbrt
    
        typedef ::SireCAS::Expression ( *cbrt_function_type )( ::SireCAS::Expression const & );
        cbrt_function_type cbrt_function_value( &::SireCAS::cbrt );
        
        bp::def( 
            "cbrt"
            , cbrt_function_value
            , ( bp::arg("ex0") )
            , "" );
    
    }

    { //::pow
    
        typedef double ( *pow_function_type )( double,double );
        pow_function_type pow_function_value( &::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("__x"), bp::arg("__y") )
            , "Return X to the Y power." );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::Expression const &,int );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("ex0"), bp::arg("n") )
            , "" );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::Expression const &,double );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("ex0"), bp::arg("n") )
            , "" );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::Expression const &,::SireCAS::Expression const & );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("ex0"), bp::arg("n") )
            , "" );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::Expression const &,::SireMaths::Complex const & );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("ex0"), bp::arg("n") )
            , "" );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::Expression const &,::SireMaths::Rational const & );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("ex0"), bp::arg("n") )
            , "" );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::ExBase const &,int );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("base"), bp::arg("n") )
            , "" );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::ExBase const &,::SireMaths::Rational const & );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("base"), bp::arg("n") )
            , "" );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::ExBase const &,double );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("base"), bp::arg("n") )
            , "" );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::ExBase const &,::SireMaths::Complex const & );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("base"), bp::arg("n") )
            , "" );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::ExBase const &,::SireCAS::Expression const & );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("base"), bp::arg("n") )
            , "" );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::ExBase const &,::SireCAS::ExBase const & );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("base"), bp::arg("n") )
            , "" );
    
    }

    { //::sqrt
    
        typedef double ( *sqrt_function_type )( double );
        sqrt_function_type sqrt_function_value( &::sqrt );
        
        bp::def( 
            "sqrt"
            , sqrt_function_value
            , ( bp::arg("__x") )
            , "Return the square root of X." );
    
    }

    { //::SireCAS::sqrt
    
        typedef ::SireCAS::Expression ( *sqrt_function_type )( ::SireCAS::Expression const & );
        sqrt_function_type sqrt_function_value( &::SireCAS::sqrt );
        
        bp::def( 
            "sqrt"
            , sqrt_function_value
            , ( bp::arg("ex0") )
            , "" );
    
    }

    { //::SireCAS::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::SireCAS::ExBase const & );
        wrap_function_type wrap_function_value( &::SireCAS::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("expression") )
            , "" );
    
    }

    { //::SireCAS::wrap
    
        typedef ::SireBase::PropertyPtr ( *wrap_function_type )( ::SireCAS::Expression const & );
        wrap_function_type wrap_function_value( &::SireCAS::wrap );
        
        bp::def( 
            "wrap"
            , wrap_function_value
            , ( bp::arg("expression") )
            , "" );
    
    }

}
