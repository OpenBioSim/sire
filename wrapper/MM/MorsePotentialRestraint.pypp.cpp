// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "MorsePotentialRestraint.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/units.h"

#include "morsepotentialrestraints.h"

#include <QDebug>

#include "morsepotentialrestraints.h"

SireMM::MorsePotentialRestraint __copy__(const SireMM::MorsePotentialRestraint &other){ return SireMM::MorsePotentialRestraint(other); }

#include "Helpers/copy.hpp"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_MorsePotentialRestraint_class(){

    { //::SireMM::MorsePotentialRestraint
        typedef bp::class_< SireMM::MorsePotentialRestraint, bp::bases< SireBase::Property > > MorsePotentialRestraint_exposer_t;
        MorsePotentialRestraint_exposer_t MorsePotentialRestraint_exposer = MorsePotentialRestraint_exposer_t( "MorsePotentialRestraint", "This class represents a single Morse restraint between any two\natoms in a system\n", bp::init< >("Null constructor") );
        bp::scope MorsePotentialRestraint_scope( MorsePotentialRestraint_exposer );
        MorsePotentialRestraint_exposer.def( bp::init< qint64, qint64, SireUnits::Dimension::HarmonicBondConstant const &, SireUnits::Dimension::Length const &, SireUnits::Dimension::MolarEnergy const & >(( bp::arg("atom0"), bp::arg("atom1"), bp::arg("k"), bp::arg("r0"), bp::arg("de") ), "Construct to restrain the atom at index atom to the specified position\n  using the specified force constant and flat-bottom well-width\n") );
        MorsePotentialRestraint_exposer.def( bp::init< QList< long long > const &, QList< long long > const &, SireUnits::Dimension::HarmonicBondConstant const &, SireUnits::Dimension::Length const &, SireUnits::Dimension::MolarEnergy const & >(( bp::arg("atoms0"), bp::arg("atoms1"), bp::arg("k"), bp::arg("r0"), bp::arg("de") ), "Construct to restrain the atoms whose indicies are\n  in atoms to the specified position using the specified force constant\n  and dissociation energy\n") );
        MorsePotentialRestraint_exposer.def( bp::init< SireMM::MorsePotentialRestraint const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::MorsePotentialRestraint::atom0
        
            typedef ::qint64 ( ::SireMM::MorsePotentialRestraint::*atom0_function_type)(  ) const;
            atom0_function_type atom0_function_value( &::SireMM::MorsePotentialRestraint::atom0 );
            
            MorsePotentialRestraint_exposer.def( 
                "atom0"
                , atom0_function_value
                , bp::release_gil_policy()
                , "Return the index of the atom if this is a single-atom restraint" );
        
        }
        { //::SireMM::MorsePotentialRestraint::atom1
        
            typedef ::qint64 ( ::SireMM::MorsePotentialRestraint::*atom1_function_type)(  ) const;
            atom1_function_type atom1_function_value( &::SireMM::MorsePotentialRestraint::atom1 );
            
            MorsePotentialRestraint_exposer.def( 
                "atom1"
                , atom1_function_value
                , bp::release_gil_policy()
                , "Return the index of the atom if this is a single-atom restraint" );
        
        }
        { //::SireMM::MorsePotentialRestraint::atoms0
        
            typedef ::QVector< long long > ( ::SireMM::MorsePotentialRestraint::*atoms0_function_type)(  ) const;
            atoms0_function_type atoms0_function_value( &::SireMM::MorsePotentialRestraint::atoms0 );
            
            MorsePotentialRestraint_exposer.def( 
                "atoms0"
                , atoms0_function_value
                , bp::release_gil_policy()
                , "Return the indexes of the atoms whose centroid is to be restrained" );
        
        }
        { //::SireMM::MorsePotentialRestraint::atoms1
        
            typedef ::QVector< long long > ( ::SireMM::MorsePotentialRestraint::*atoms1_function_type)(  ) const;
            atoms1_function_type atoms1_function_value( &::SireMM::MorsePotentialRestraint::atoms1 );
            
            MorsePotentialRestraint_exposer.def( 
                "atoms1"
                , atoms1_function_value
                , bp::release_gil_policy()
                , "Return the indexes of the atoms whose centroid is to be restrained" );
        
        }
        { //::SireMM::MorsePotentialRestraint::de
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::SireMM::MorsePotentialRestraint::*de_function_type)(  ) const;
            de_function_type de_function_value( &::SireMM::MorsePotentialRestraint::de );
            
            MorsePotentialRestraint_exposer.def( 
                "de"
                , de_function_value
                , bp::release_gil_policy()
                , "Return the dissociation energy (depth) of MovingHarmonic bond" );
        
        }
        { //::SireMM::MorsePotentialRestraint::isAtomRestraint
        
            typedef bool ( ::SireMM::MorsePotentialRestraint::*isAtomRestraint_function_type)(  ) const;
            isAtomRestraint_function_type isAtomRestraint_function_value( &::SireMM::MorsePotentialRestraint::isAtomRestraint );
            
            MorsePotentialRestraint_exposer.def( 
                "isAtomRestraint"
                , isAtomRestraint_function_value
                , bp::release_gil_policy()
                , "Return whether this is a single-atom restraint" );
        
        }
        { //::SireMM::MorsePotentialRestraint::isCentroidRestraint
        
            typedef bool ( ::SireMM::MorsePotentialRestraint::*isCentroidRestraint_function_type)(  ) const;
            isCentroidRestraint_function_type isCentroidRestraint_function_value( &::SireMM::MorsePotentialRestraint::isCentroidRestraint );
            
            MorsePotentialRestraint_exposer.def( 
                "isCentroidRestraint"
                , isCentroidRestraint_function_value
                , bp::release_gil_policy()
                , "Return whether this restraint acts on the centroid of a group\n  of atoms" );
        
        }
        { //::SireMM::MorsePotentialRestraint::isNull
        
            typedef bool ( ::SireMM::MorsePotentialRestraint::*isNull_function_type)(  ) const;
            isNull_function_type isNull_function_value( &::SireMM::MorsePotentialRestraint::isNull );
            
            MorsePotentialRestraint_exposer.def( 
                "isNull"
                , isNull_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::MorsePotentialRestraint::k
        
            typedef ::SireUnits::Dimension::HarmonicBondConstant ( ::SireMM::MorsePotentialRestraint::*k_function_type)(  ) const;
            k_function_type k_function_value( &::SireMM::MorsePotentialRestraint::k );
            
            MorsePotentialRestraint_exposer.def( 
                "k"
                , k_function_value
                , bp::release_gil_policy()
                , "Return the force constant for the restraint" );
        
        }
        MorsePotentialRestraint_exposer.def( bp::self != bp::self );
        MorsePotentialRestraint_exposer.def( bp::self + bp::self );
        MorsePotentialRestraint_exposer.def( bp::self + bp::other< SireMM::MorsePotentialRestraints >() );
        { //::SireMM::MorsePotentialRestraint::operator=
        
            typedef ::SireMM::MorsePotentialRestraint & ( ::SireMM::MorsePotentialRestraint::*assign_function_type)( ::SireMM::MorsePotentialRestraint const & ) ;
            assign_function_type assign_function_value( &::SireMM::MorsePotentialRestraint::operator= );
            
            MorsePotentialRestraint_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        MorsePotentialRestraint_exposer.def( bp::self == bp::self );
        { //::SireMM::MorsePotentialRestraint::r0
        
            typedef ::SireUnits::Dimension::Length ( ::SireMM::MorsePotentialRestraint::*r0_function_type)(  ) const;
            r0_function_type r0_function_value( &::SireMM::MorsePotentialRestraint::r0 );
            
            MorsePotentialRestraint_exposer.def( 
                "r0"
                , r0_function_value
                , bp::release_gil_policy()
                , "Return the equilibrium position of the harmonic MovingHarmonic." );
        
        }
        { //::SireMM::MorsePotentialRestraint::toString
        
            typedef ::QString ( ::SireMM::MorsePotentialRestraint::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::MorsePotentialRestraint::toString );
            
            MorsePotentialRestraint_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::MorsePotentialRestraint::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::MorsePotentialRestraint::typeName );
            
            MorsePotentialRestraint_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::MorsePotentialRestraint::what
        
            typedef char const * ( ::SireMM::MorsePotentialRestraint::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::MorsePotentialRestraint::what );
            
            MorsePotentialRestraint_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        MorsePotentialRestraint_exposer.staticmethod( "typeName" );
        MorsePotentialRestraint_exposer.def( "__copy__", &__copy__<SireMM::MorsePotentialRestraint>);
        MorsePotentialRestraint_exposer.def( "__deepcopy__", &__copy__<SireMM::MorsePotentialRestraint>);
        MorsePotentialRestraint_exposer.def( "clone", &__copy__<SireMM::MorsePotentialRestraint>);
        MorsePotentialRestraint_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::MorsePotentialRestraint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MorsePotentialRestraint_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::MorsePotentialRestraint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MorsePotentialRestraint_exposer.def_pickle(sire_pickle_suite< ::SireMM::MorsePotentialRestraint >());
        MorsePotentialRestraint_exposer.def( "__str__", &__str__< ::SireMM::MorsePotentialRestraint > );
        MorsePotentialRestraint_exposer.def( "__repr__", &__str__< ::SireMM::MorsePotentialRestraint > );
    }

}
