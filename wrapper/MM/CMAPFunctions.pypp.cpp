// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "CMAPFunctions.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/console.h"

#include "SireError/errors.h"

#include "SireMol/atommapping.h"

#include "SireMol/atommatcher.h"

#include "SireMol/atomselection.h"

#include "SireMol/errors.h"

#include "SireMol/moleculedata.h"

#include "SireMol/moleculeinfodata.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "cmapfunctions.h"

#include "sireglobal.h"

#include "cmapfunctions.h"

SireMM::CMAPFunctions __copy__(const SireMM::CMAPFunctions &other){ return SireMM::CMAPFunctions(other); }

#include "Helpers/copy.hpp"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_CMAPFunctions_class(){

    { //::SireMM::CMAPFunctions
        typedef bp::class_< SireMM::CMAPFunctions, bp::bases< SireMol::MoleculeProperty, SireMol::MolViewProperty, SireBase::Property > > CMAPFunctions_exposer_t;
        CMAPFunctions_exposer_t CMAPFunctions_exposer = CMAPFunctions_exposer_t( "CMAPFunctions", "This class holds all of the CMAP parameters for a single molecule", bp::init< >("") );
        bp::scope CMAPFunctions_scope( CMAPFunctions_exposer );
        CMAPFunctions_exposer.def( bp::init< SireMol::MoleculeData const & >(( bp::arg("moldata") ), "") );
        CMAPFunctions_exposer.def( bp::init< SireMol::MoleculeInfoData const & >(( bp::arg("molinfo") ), "") );
        CMAPFunctions_exposer.def( bp::init< SireMM::CMAPFunctions const & >(( bp::arg("other") ), "") );
        { //::SireMM::CMAPFunctions::clear
        
            typedef void ( ::SireMM::CMAPFunctions::*clear_function_type)(  ) ;
            clear_function_type clear_function_value( &::SireMM::CMAPFunctions::clear );
            
            CMAPFunctions_exposer.def( 
                "clear"
                , clear_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::clear
        
            typedef void ( ::SireMM::CMAPFunctions::*clear_function_type)( ::SireMol::AtomIdx ) ;
            clear_function_type clear_function_value( &::SireMM::CMAPFunctions::clear );
            
            CMAPFunctions_exposer.def( 
                "clear"
                , clear_function_value
                , ( bp::arg("atom") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::clear
        
            typedef void ( ::SireMM::CMAPFunctions::*clear_function_type)( ::SireMol::AtomID const & ) ;
            clear_function_type clear_function_value( &::SireMM::CMAPFunctions::clear );
            
            CMAPFunctions_exposer.def( 
                "clear"
                , clear_function_value
                , ( bp::arg("atom") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::clear
        
            typedef void ( ::SireMM::CMAPFunctions::*clear_function_type)( ::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx ) ;
            clear_function_type clear_function_value( &::SireMM::CMAPFunctions::clear );
            
            CMAPFunctions_exposer.def( 
                "clear"
                , clear_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("atom4") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::clear
        
            typedef void ( ::SireMM::CMAPFunctions::*clear_function_type)( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) ;
            clear_function_type clear_function_value( &::SireMM::CMAPFunctions::clear );
            
            CMAPFunctions_exposer.def( 
                "clear"
                , clear_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("atom4") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::clear
        
            typedef void ( ::SireMM::CMAPFunctions::*clear_function_type)( ::QList< SireMol::AtomIdx > const &,bool ) ;
            clear_function_type clear_function_value( &::SireMM::CMAPFunctions::clear );
            
            CMAPFunctions_exposer.def( 
                "clear"
                , clear_function_value
                , ( bp::arg("atoms"), bp::arg("exclusive")=(bool)(true) )
                , "Clear all functions that involve any of the atoms in atoms\n  - if exclusive is true, then this only removes functions\n  that exclusively involve these atoms - if false, then\n  if removes functions that involve any of these atoms\n" );
        
        }
        { //::SireMM::CMAPFunctions::includeOnly
        
            typedef ::SireMM::CMAPFunctions ( ::SireMM::CMAPFunctions::*includeOnly_function_type)( ::SireMol::AtomSelection const &,bool ) const;
            includeOnly_function_type includeOnly_function_value( &::SireMM::CMAPFunctions::includeOnly );
            
            CMAPFunctions_exposer.def( 
                "includeOnly"
                , includeOnly_function_value
                , ( bp::arg("selected_atoms"), bp::arg("isstrict")=(bool)(true) )
                , "Return the set of functions where only functions that involve the\natoms in selected_atoms are included. If isstrict is true, then\nonly include functions where all of the atoms are in selected_atoms,\nwhile if isstrict is false, include functions where at least one\natom is in selected_atoms" );
        
        }
        { //::SireMM::CMAPFunctions::isCompatibleWith
        
            typedef bool ( ::SireMM::CMAPFunctions::*isCompatibleWith_function_type)( ::SireMol::MoleculeInfoData const & ) const;
            isCompatibleWith_function_type isCompatibleWith_function_value( &::SireMM::CMAPFunctions::isCompatibleWith );
            
            CMAPFunctions_exposer.def( 
                "isCompatibleWith"
                , isCompatibleWith_function_value
                , ( bp::arg("molinfo") )
                , bp::release_gil_policy()
                , "Return whether or not this property is compatible with the molecule\nwhose layout information is in molinfo" );
        
        }
        { //::SireMM::CMAPFunctions::isEmpty
        
            typedef bool ( ::SireMM::CMAPFunctions::*isEmpty_function_type)(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMM::CMAPFunctions::isEmpty );
            
            CMAPFunctions_exposer.def( 
                "isEmpty"
                , isEmpty_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::merge
        
            typedef ::SireBase::PropertyList ( ::SireMM::CMAPFunctions::*merge_function_type)( ::SireMol::MolViewProperty const &,::SireMol::AtomIdxMapping const &,::QString const &,::SireBase::PropertyMap const & ) const;
            merge_function_type merge_function_value( &::SireMM::CMAPFunctions::merge );
            
            CMAPFunctions_exposer.def( 
                "merge"
                , merge_function_value
                , ( bp::arg("other"), bp::arg("mapping"), bp::arg("ghost")=::QString( ), bp::arg("map")=SireBase::PropertyMap() )
                , "Merge this property with another property" );
        
        }
        { //::SireMM::CMAPFunctions::nFunctions
        
            typedef int ( ::SireMM::CMAPFunctions::*nFunctions_function_type)(  ) const;
            nFunctions_function_type nFunctions_function_value( &::SireMM::CMAPFunctions::nFunctions );
            
            CMAPFunctions_exposer.def( 
                "nFunctions"
                , nFunctions_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        CMAPFunctions_exposer.def( bp::self != bp::self );
        { //::SireMM::CMAPFunctions::operator=
        
            typedef ::SireMM::CMAPFunctions & ( ::SireMM::CMAPFunctions::*assign_function_type)( ::SireMM::CMAPFunctions const & ) ;
            assign_function_type assign_function_value( &::SireMM::CMAPFunctions::operator= );
            
            CMAPFunctions_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        CMAPFunctions_exposer.def( bp::self == bp::self );
        { //::SireMM::CMAPFunctions::parameter
        
            typedef ::SireMM::CMAPParameter ( ::SireMM::CMAPFunctions::*parameter_function_type)( ::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx ) const;
            parameter_function_type parameter_function_value( &::SireMM::CMAPFunctions::parameter );
            
            CMAPFunctions_exposer.def( 
                "parameter"
                , parameter_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("atom4") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::parameter
        
            typedef ::SireMM::CMAPParameter ( ::SireMM::CMAPFunctions::*parameter_function_type)( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            parameter_function_type parameter_function_value( &::SireMM::CMAPFunctions::parameter );
            
            CMAPFunctions_exposer.def( 
                "parameter"
                , parameter_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("atom4") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::parameters
        
            typedef ::QVector< SireMM::CMAPFunction > ( ::SireMM::CMAPFunctions::*parameters_function_type)(  ) const;
            parameters_function_type parameters_function_value( &::SireMM::CMAPFunctions::parameters );
            
            CMAPFunctions_exposer.def( 
                "parameters"
                , parameters_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::parameters
        
            typedef ::QVector< SireMM::CMAPFunction > ( ::SireMM::CMAPFunctions::*parameters_function_type)( ::QList< SireMol::AtomIdx > const &,bool ) const;
            parameters_function_type parameters_function_value( &::SireMM::CMAPFunctions::parameters );
            
            CMAPFunctions_exposer.def( 
                "parameters"
                , parameters_function_value
                , ( bp::arg("atoms"), bp::arg("exclusive")=(bool)(true) )
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::set
        
            typedef void ( ::SireMM::CMAPFunctions::*set_function_type)( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMM::CMAPParameter const & ) ;
            set_function_type set_function_value( &::SireMM::CMAPFunctions::set );
            
            CMAPFunctions_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("atom4"), bp::arg("parameter") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::set
        
            typedef void ( ::SireMM::CMAPFunctions::*set_function_type)( ::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMM::CMAPParameter const & ) ;
            set_function_type set_function_value( &::SireMM::CMAPFunctions::set );
            
            CMAPFunctions_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("atom4"), bp::arg("parameter") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::toString
        
            typedef ::QString ( ::SireMM::CMAPFunctions::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::CMAPFunctions::toString );
            
            CMAPFunctions_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CMAPFunctions::typeName );
            
            CMAPFunctions_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPFunctions::what
        
            typedef char const * ( ::SireMM::CMAPFunctions::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::CMAPFunctions::what );
            
            CMAPFunctions_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        CMAPFunctions_exposer.staticmethod( "typeName" );
        CMAPFunctions_exposer.def( "__copy__", &__copy__<SireMM::CMAPFunctions>);
        CMAPFunctions_exposer.def( "__deepcopy__", &__copy__<SireMM::CMAPFunctions>);
        CMAPFunctions_exposer.def( "clone", &__copy__<SireMM::CMAPFunctions>);
        CMAPFunctions_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CMAPFunctions >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CMAPFunctions_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CMAPFunctions >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CMAPFunctions_exposer.def_pickle(sire_pickle_suite< ::SireMM::CMAPFunctions >());
        CMAPFunctions_exposer.def( "__str__", &__str__< ::SireMM::CMAPFunctions > );
        CMAPFunctions_exposer.def( "__repr__", &__str__< ::SireMM::CMAPFunctions > );
    }

}
