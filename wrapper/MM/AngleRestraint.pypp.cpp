// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "AngleRestraint.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/conditional.h"

#include "SireCAS/errors.h"

#include "SireCAS/power.h"

#include "SireCAS/symbols.h"

#include "SireCAS/values.h"

#include "SireFF/forcetable.h"

#include "SireID/index.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/angle.h"

#include "SireUnits/units.h"

#include "anglerestraint.h"

#include <QDebug>

#include "anglerestraint.h"

SireMM::AngleRestraint __copy__(const SireMM::AngleRestraint &other){ return SireMM::AngleRestraint(other); }

#include "Helpers/copy.hpp"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_AngleRestraint_class(){

    { //::SireMM::AngleRestraint
        typedef bp::class_< SireMM::AngleRestraint, bp::bases< SireBase::Property > > AngleRestraint_exposer_t;
        AngleRestraint_exposer_t AngleRestraint_exposer = AngleRestraint_exposer_t( "AngleRestraint", "This class represents a single angle restraint between any three\natoms in a system\nAuthor: Christopher Woods\n", bp::init< >("Null constructor") );
        bp::scope AngleRestraint_scope( AngleRestraint_exposer );
        AngleRestraint_exposer.def( bp::init< QList< long long > const &, SireUnits::Dimension::Angle const &, SireUnits::Dimension::HarmonicAngleConstant const & >(( bp::arg("atoms"), bp::arg("theta0"), bp::arg("ktheta") ), "Construct a restraint that acts on the angle within the\nthree atoms atom0, atom1 and atom2 (theta == a(012)),\nrestraining the angle within these atoms") );
        AngleRestraint_exposer.def( bp::init< SireMM::AngleRestraint const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::AngleRestraint::atoms
        
            typedef ::QVector< long long > ( ::SireMM::AngleRestraint::*atoms_function_type)(  ) const;
            atoms_function_type atoms_function_value( &::SireMM::AngleRestraint::atoms );
            
            AngleRestraint_exposer.def( 
                "atoms"
                , atoms_function_value
                , bp::release_gil_policy()
                , "Return the atoms involved in the restraint" );
        
        }
        { //::SireMM::AngleRestraint::isNull
        
            typedef bool ( ::SireMM::AngleRestraint::*isNull_function_type)(  ) const;
            isNull_function_type isNull_function_value( &::SireMM::AngleRestraint::isNull );
            
            AngleRestraint_exposer.def( 
                "isNull"
                , isNull_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::AngleRestraint::ktheta
        
            typedef ::SireUnits::Dimension::HarmonicAngleConstant ( ::SireMM::AngleRestraint::*ktheta_function_type)(  ) const;
            ktheta_function_type ktheta_function_value( &::SireMM::AngleRestraint::ktheta );
            
            AngleRestraint_exposer.def( 
                "ktheta"
                , ktheta_function_value
                , bp::release_gil_policy()
                , "Return the force constant for the restraint" );
        
        }
        AngleRestraint_exposer.def( bp::self != bp::self );
        AngleRestraint_exposer.def( bp::self + bp::self );
        AngleRestraint_exposer.def( bp::self + bp::other< SireMM::AngleRestraints >() );
        { //::SireMM::AngleRestraint::operator=
        
            typedef ::SireMM::AngleRestraint & ( ::SireMM::AngleRestraint::*assign_function_type)( ::SireMM::AngleRestraint const & ) ;
            assign_function_type assign_function_value( &::SireMM::AngleRestraint::operator= );
            
            AngleRestraint_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        AngleRestraint_exposer.def( bp::self == bp::self );
        { //::SireMM::AngleRestraint::theta0
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMM::AngleRestraint::*theta0_function_type)(  ) const;
            theta0_function_type theta0_function_value( &::SireMM::AngleRestraint::theta0 );
            
            AngleRestraint_exposer.def( 
                "theta0"
                , theta0_function_value
                , bp::release_gil_policy()
                , "Return the equilibrium angle for the restraint" );
        
        }
        { //::SireMM::AngleRestraint::toString
        
            typedef ::QString ( ::SireMM::AngleRestraint::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::AngleRestraint::toString );
            
            AngleRestraint_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::AngleRestraint::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::AngleRestraint::typeName );
            
            AngleRestraint_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::AngleRestraint::what
        
            typedef char const * ( ::SireMM::AngleRestraint::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::AngleRestraint::what );
            
            AngleRestraint_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        AngleRestraint_exposer.staticmethod( "typeName" );
        AngleRestraint_exposer.def( "__copy__", &__copy__<SireMM::AngleRestraint>);
        AngleRestraint_exposer.def( "__deepcopy__", &__copy__<SireMM::AngleRestraint>);
        AngleRestraint_exposer.def( "clone", &__copy__<SireMM::AngleRestraint>);
        AngleRestraint_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::AngleRestraint >,
                                bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AngleRestraint_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::AngleRestraint >,
                                bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AngleRestraint_exposer.def_pickle(sire_pickle_suite< ::SireMM::AngleRestraint >());
        AngleRestraint_exposer.def( "__str__", &__str__< ::SireMM::AngleRestraint > );
        AngleRestraint_exposer.def( "__repr__", &__str__< ::SireMM::AngleRestraint > );
    }

}
