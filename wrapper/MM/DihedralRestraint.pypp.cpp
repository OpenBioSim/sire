// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "DihedralRestraint.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/errors.h"

#include "SireID/index.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/units.h"

#include "dihedralrestraints.h"

#include <QDebug>

#include "dihedralrestraints.h"

SireMM::DihedralRestraint __copy__(const SireMM::DihedralRestraint &other){ return SireMM::DihedralRestraint(other); }

#include "Helpers/copy.hpp"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_DihedralRestraint_class(){

    { //::SireMM::DihedralRestraint
        typedef bp::class_< SireMM::DihedralRestraint, bp::bases< SireBase::Property > > DihedralRestraint_exposer_t;
        DihedralRestraint_exposer_t DihedralRestraint_exposer = DihedralRestraint_exposer_t( "DihedralRestraint", "This class represents a single torsion restraint between any four\natoms in a system\nAuthor: Christopher Woods\n", bp::init< >("Null constructor") );
        bp::scope DihedralRestraint_scope( DihedralRestraint_exposer );
        DihedralRestraint_exposer.def( bp::init< QList< long long > const &, SireUnits::Dimension::Angle const &, SireUnits::Dimension::HarmonicAngleConstant const & >(( bp::arg("atoms"), bp::arg("phi0"), bp::arg("kphi") ), "Construct a restraint that acts on the angle within the\nfour atoms atom0, atom1, atom2 atom3 (phi == a(0123)),\nrestraining the angle within these atoms") );
        DihedralRestraint_exposer.def( bp::init< SireMM::DihedralRestraint const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::DihedralRestraint::atoms
        
            typedef ::QVector< long long > ( ::SireMM::DihedralRestraint::*atoms_function_type)(  ) const;
            atoms_function_type atoms_function_value( &::SireMM::DihedralRestraint::atoms );
            
            DihedralRestraint_exposer.def( 
                "atoms"
                , atoms_function_value
                , bp::release_gil_policy()
                , "Return the atoms involved in the restraint" );
        
        }
        { //::SireMM::DihedralRestraint::isNull
        
            typedef bool ( ::SireMM::DihedralRestraint::*isNull_function_type)(  ) const;
            isNull_function_type isNull_function_value( &::SireMM::DihedralRestraint::isNull );
            
            DihedralRestraint_exposer.def( 
                "isNull"
                , isNull_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::DihedralRestraint::kphi
        
            typedef ::SireUnits::Dimension::HarmonicAngleConstant ( ::SireMM::DihedralRestraint::*kphi_function_type)(  ) const;
            kphi_function_type kphi_function_value( &::SireMM::DihedralRestraint::kphi );
            
            DihedralRestraint_exposer.def( 
                "kphi"
                , kphi_function_value
                , bp::release_gil_policy()
                , "Return the force constant for the restraint" );
        
        }
        DihedralRestraint_exposer.def( bp::self != bp::self );
        DihedralRestraint_exposer.def( bp::self + bp::self );
        DihedralRestraint_exposer.def( bp::self + bp::other< SireMM::DihedralRestraints >() );
        { //::SireMM::DihedralRestraint::operator=
        
            typedef ::SireMM::DihedralRestraint & ( ::SireMM::DihedralRestraint::*assign_function_type)( ::SireMM::DihedralRestraint const & ) ;
            assign_function_type assign_function_value( &::SireMM::DihedralRestraint::operator= );
            
            DihedralRestraint_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        DihedralRestraint_exposer.def( bp::self == bp::self );
        { //::SireMM::DihedralRestraint::phi0
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMM::DihedralRestraint::*phi0_function_type)(  ) const;
            phi0_function_type phi0_function_value( &::SireMM::DihedralRestraint::phi0 );
            
            DihedralRestraint_exposer.def( 
                "phi0"
                , phi0_function_value
                , bp::release_gil_policy()
                , "Return the equilibrium angle for the restraint" );
        
        }
        { //::SireMM::DihedralRestraint::toString
        
            typedef ::QString ( ::SireMM::DihedralRestraint::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::DihedralRestraint::toString );
            
            DihedralRestraint_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::DihedralRestraint::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::DihedralRestraint::typeName );
            
            DihedralRestraint_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::DihedralRestraint::what
        
            typedef char const * ( ::SireMM::DihedralRestraint::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::DihedralRestraint::what );
            
            DihedralRestraint_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        DihedralRestraint_exposer.staticmethod( "typeName" );
        DihedralRestraint_exposer.def( "__copy__", &__copy__<SireMM::DihedralRestraint>);
        DihedralRestraint_exposer.def( "__deepcopy__", &__copy__<SireMM::DihedralRestraint>);
        DihedralRestraint_exposer.def( "clone", &__copy__<SireMM::DihedralRestraint>);
        DihedralRestraint_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::DihedralRestraint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        DihedralRestraint_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::DihedralRestraint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        DihedralRestraint_exposer.def_pickle(sire_pickle_suite< ::SireMM::DihedralRestraint >());
        DihedralRestraint_exposer.def( "__str__", &__str__< ::SireMM::DihedralRestraint > );
        DihedralRestraint_exposer.def( "__repr__", &__str__< ::SireMM::DihedralRestraint > );
    }

}
