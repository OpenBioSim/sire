// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "CMAPParameter.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "cmapparameter.h"

#include <QReadWriteLock>

#include "cmapparameter.h"

SireMM::CMAPParameter __copy__(const SireMM::CMAPParameter &other){ return SireMM::CMAPParameter(other); }

#include "Helpers/copy.hpp"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_CMAPParameter_class(){

    { //::SireMM::CMAPParameter
        typedef bp::class_< SireMM::CMAPParameter > CMAPParameter_exposer_t;
        CMAPParameter_exposer_t CMAPParameter_exposer = CMAPParameter_exposer_t( "CMAPParameter", "", bp::init< >("") );
        bp::scope CMAPParameter_scope( CMAPParameter_exposer );
        CMAPParameter_exposer.def( bp::init< SireBase::Array2D< double > const & >(( bp::arg("grid") ), "") );
        CMAPParameter_exposer.def( bp::init< SireMM::CMAPParameter const & >(( bp::arg("other") ), "") );
        { //::SireMM::CMAPParameter::grid
        
            typedef ::SireBase::Array2D< double > const & ( ::SireMM::CMAPParameter::*grid_function_type)(  ) const;
            grid_function_type grid_function_value( &::SireMM::CMAPParameter::grid );
            
            CMAPParameter_exposer.def( 
                "grid"
                , grid_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "" );
        
        }
        { //::SireMM::CMAPParameter::isEmpty
        
            typedef bool ( ::SireMM::CMAPParameter::*isEmpty_function_type)(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMM::CMAPParameter::isEmpty );
            
            CMAPParameter_exposer.def( 
                "isEmpty"
                , isEmpty_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPParameter::isNull
        
            typedef bool ( ::SireMM::CMAPParameter::*isNull_function_type)(  ) const;
            isNull_function_type isNull_function_value( &::SireMM::CMAPParameter::isNull );
            
            CMAPParameter_exposer.def( 
                "isNull"
                , isNull_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPParameter::nColumns
        
            typedef int ( ::SireMM::CMAPParameter::*nColumns_function_type)(  ) const;
            nColumns_function_type nColumns_function_value( &::SireMM::CMAPParameter::nColumns );
            
            CMAPParameter_exposer.def( 
                "nColumns"
                , nColumns_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPParameter::nRows
        
            typedef int ( ::SireMM::CMAPParameter::*nRows_function_type)(  ) const;
            nRows_function_type nRows_function_value( &::SireMM::CMAPParameter::nRows );
            
            CMAPParameter_exposer.def( 
                "nRows"
                , nRows_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        CMAPParameter_exposer.def( bp::self != bp::self );
        { //::SireMM::CMAPParameter::operator=
        
            typedef ::SireMM::CMAPParameter & ( ::SireMM::CMAPParameter::*assign_function_type)( ::SireMM::CMAPParameter const & ) ;
            assign_function_type assign_function_value( &::SireMM::CMAPParameter::operator= );
            
            CMAPParameter_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        CMAPParameter_exposer.def( bp::self == bp::self );
        { //::SireMM::CMAPParameter::toString
        
            typedef ::QString ( ::SireMM::CMAPParameter::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::CMAPParameter::toString );
            
            CMAPParameter_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPParameter::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CMAPParameter::typeName );
            
            CMAPParameter_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPParameter::values
        
            typedef ::QVector< double > ( ::SireMM::CMAPParameter::*values_function_type)(  ) const;
            values_function_type values_function_value( &::SireMM::CMAPParameter::values );
            
            CMAPParameter_exposer.def( 
                "values"
                , values_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::CMAPParameter::what
        
            typedef char const * ( ::SireMM::CMAPParameter::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::CMAPParameter::what );
            
            CMAPParameter_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        CMAPParameter_exposer.staticmethod( "typeName" );
        CMAPParameter_exposer.def( "__copy__", &__copy__<SireMM::CMAPParameter>);
        CMAPParameter_exposer.def( "__deepcopy__", &__copy__<SireMM::CMAPParameter>);
        CMAPParameter_exposer.def( "clone", &__copy__<SireMM::CMAPParameter>);
        CMAPParameter_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CMAPParameter >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CMAPParameter_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CMAPParameter >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CMAPParameter_exposer.def_pickle(sire_pickle_suite< ::SireMM::CMAPParameter >());
        CMAPParameter_exposer.def( "__str__", &__str__< ::SireMM::CMAPParameter > );
        CMAPParameter_exposer.def( "__repr__", &__str__< ::SireMM::CMAPParameter > );
    }

}
