// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "RMSDRestraints.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/units.h"

#include "rmsdrestraints.h"

#include <QDebug>

#include "rmsdrestraints.h"

SireMM::RMSDRestraints __copy__(const SireMM::RMSDRestraints &other){ return SireMM::RMSDRestraints(other); }

#include "Helpers/copy.hpp"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

void register_RMSDRestraints_class(){

    { //::SireMM::RMSDRestraints
        typedef bp::class_< SireMM::RMSDRestraints, bp::bases< SireMM::Restraints, SireBase::Property > > RMSDRestraints_exposer_t;
        RMSDRestraints_exposer_t RMSDRestraints_exposer = RMSDRestraints_exposer_t( "RMSDRestraints", "This class provides the information for a collection of RMSD\nrestraints that can be added to a collection of molecues. Each\nrestraint can act on a particle or the centroid of a collection\nof particles. The restaints are spherically symmetric, and\nare either flat-bottom harmonics or harmonic potentials\n", bp::init< >("Null constructor") );
        bp::scope RMSDRestraints_scope( RMSDRestraints_exposer );
        RMSDRestraints_exposer.def( bp::init< QString const & >(( bp::arg("name") ), "") );
        RMSDRestraints_exposer.def( bp::init< SireMM::RMSDRestraint const & >(( bp::arg("restraint") ), "") );
        RMSDRestraints_exposer.def( bp::init< QList< SireMM::RMSDRestraint > const & >(( bp::arg("restraints") ), "") );
        RMSDRestraints_exposer.def( bp::init< QString const &, SireMM::RMSDRestraint const & >(( bp::arg("name"), bp::arg("restraint") ), "") );
        RMSDRestraints_exposer.def( bp::init< QString const &, QList< SireMM::RMSDRestraint > const & >(( bp::arg("name"), bp::arg("restraints") ), "") );
        RMSDRestraints_exposer.def( bp::init< SireMM::RMSDRestraints const & >(( bp::arg("other") ), "") );
        { //::SireMM::RMSDRestraints::add
        
            typedef void ( ::SireMM::RMSDRestraints::*add_function_type)( ::SireMM::RMSDRestraint const & ) ;
            add_function_type add_function_value( &::SireMM::RMSDRestraints::add );
            
            RMSDRestraints_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("restraint") )
                , bp::release_gil_policy()
                , "Add a restraint onto the list" );
        
        }
        { //::SireMM::RMSDRestraints::add
        
            typedef void ( ::SireMM::RMSDRestraints::*add_function_type)( ::SireMM::RMSDRestraints const & ) ;
            add_function_type add_function_value( &::SireMM::RMSDRestraints::add );
            
            RMSDRestraints_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("restraints") )
                , bp::release_gil_policy()
                , "Add a restraint onto the list" );
        
        }
        { //::SireMM::RMSDRestraints::at
        
            typedef ::SireMM::RMSDRestraint const & ( ::SireMM::RMSDRestraints::*at_function_type)( int ) const;
            at_function_type at_function_value( &::SireMM::RMSDRestraints::at );
            
            RMSDRestraints_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the ith restraint" );
        
        }
        { //::SireMM::RMSDRestraints::count
        
            typedef int ( ::SireMM::RMSDRestraints::*count_function_type)(  ) const;
            count_function_type count_function_value( &::SireMM::RMSDRestraints::count );
            
            RMSDRestraints_exposer.def( 
                "count"
                , count_function_value
                , bp::release_gil_policy()
                , "Return the number of restraints" );
        
        }
        { //::SireMM::RMSDRestraints::isEmpty
        
            typedef bool ( ::SireMM::RMSDRestraints::*isEmpty_function_type)(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMM::RMSDRestraints::isEmpty );
            
            RMSDRestraints_exposer.def( 
                "isEmpty"
                , isEmpty_function_value
                , bp::release_gil_policy()
                , "Return whether or not this is empty" );
        
        }
        { //::SireMM::RMSDRestraints::isNull
        
            typedef bool ( ::SireMM::RMSDRestraints::*isNull_function_type)(  ) const;
            isNull_function_type isNull_function_value( &::SireMM::RMSDRestraints::isNull );
            
            RMSDRestraints_exposer.def( 
                "isNull"
                , isNull_function_value
                , bp::release_gil_policy()
                , "Return whether or not this is empty" );
        
        }
        { //::SireMM::RMSDRestraints::nRestraints
        
            typedef int ( ::SireMM::RMSDRestraints::*nRestraints_function_type)(  ) const;
            nRestraints_function_type nRestraints_function_value( &::SireMM::RMSDRestraints::nRestraints );
            
            RMSDRestraints_exposer.def( 
                "nRestraints"
                , nRestraints_function_value
                , bp::release_gil_policy()
                , "Return the number of restraints" );
        
        }
        RMSDRestraints_exposer.def( bp::self != bp::self );
        RMSDRestraints_exposer.def( bp::self + bp::other< SireMM::RMSDRestraint >() );
        RMSDRestraints_exposer.def( bp::self + bp::self );
        { //::SireMM::RMSDRestraints::operator=
        
            typedef ::SireMM::RMSDRestraints & ( ::SireMM::RMSDRestraints::*assign_function_type)( ::SireMM::RMSDRestraints const & ) ;
            assign_function_type assign_function_value( &::SireMM::RMSDRestraints::operator= );
            
            RMSDRestraints_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        RMSDRestraints_exposer.def( bp::self == bp::self );
        { //::SireMM::RMSDRestraints::operator[]
        
            typedef ::SireMM::RMSDRestraint const & ( ::SireMM::RMSDRestraints::*__getitem___function_type)( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMM::RMSDRestraints::operator[] );
            
            RMSDRestraints_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "" );
        
        }
        { //::SireMM::RMSDRestraints::restraints
        
            typedef ::QList< SireMM::RMSDRestraint > ( ::SireMM::RMSDRestraints::*restraints_function_type)(  ) const;
            restraints_function_type restraints_function_value( &::SireMM::RMSDRestraints::restraints );
            
            RMSDRestraints_exposer.def( 
                "restraints"
                , restraints_function_value
                , bp::release_gil_policy()
                , "Return all of the restraints" );
        
        }
        { //::SireMM::RMSDRestraints::size
        
            typedef int ( ::SireMM::RMSDRestraints::*size_function_type)(  ) const;
            size_function_type size_function_value( &::SireMM::RMSDRestraints::size );
            
            RMSDRestraints_exposer.def( 
                "size"
                , size_function_value
                , bp::release_gil_policy()
                , "Return the number of restraints" );
        
        }
        { //::SireMM::RMSDRestraints::toString
        
            typedef ::QString ( ::SireMM::RMSDRestraints::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::RMSDRestraints::toString );
            
            RMSDRestraints_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::RMSDRestraints::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::RMSDRestraints::typeName );
            
            RMSDRestraints_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::RMSDRestraints::what
        
            typedef char const * ( ::SireMM::RMSDRestraints::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::RMSDRestraints::what );
            
            RMSDRestraints_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        RMSDRestraints_exposer.staticmethod( "typeName" );
        RMSDRestraints_exposer.def( "__copy__", &__copy__<SireMM::RMSDRestraints>);
        RMSDRestraints_exposer.def( "__deepcopy__", &__copy__<SireMM::RMSDRestraints>);
        RMSDRestraints_exposer.def( "clone", &__copy__<SireMM::RMSDRestraints>);
        RMSDRestraints_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::RMSDRestraints >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        RMSDRestraints_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::RMSDRestraints >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        RMSDRestraints_exposer.def_pickle(sire_pickle_suite< ::SireMM::RMSDRestraints >());
        RMSDRestraints_exposer.def( "__str__", &__str__< ::SireMM::RMSDRestraints > );
        RMSDRestraints_exposer.def( "__repr__", &__str__< ::SireMM::RMSDRestraints > );
        RMSDRestraints_exposer.def( "__len__", &__len_size< ::SireMM::RMSDRestraints > );
    }

}
