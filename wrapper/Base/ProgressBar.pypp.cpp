// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "ProgressBar.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/releasegil.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "progressbar.h"

#include <QAtomicInteger>

#include <QDateTime>

#include <QThread>

#include <boost/noncopyable.hpp>

#include <iostream>

#include <signal.h>

#include "progressbar.h"

SireBase::ProgressBar __copy__(const SireBase::ProgressBar &other){ return SireBase::ProgressBar(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_ProgressBar_class(){

    { //::SireBase::ProgressBar
        typedef bp::class_< SireBase::ProgressBar, bp::bases< SireBase::Property > > ProgressBar_exposer_t;
        ProgressBar_exposer_t ProgressBar_exposer = ProgressBar_exposer_t( "ProgressBar", "This is a progress bar", bp::init< >("") );
        bp::scope ProgressBar_scope( ProgressBar_exposer );
        ProgressBar_exposer.def( bp::init< quint32 >(( bp::arg("total") ), "") );
        ProgressBar_exposer.def( bp::init< quint32, QString const & >(( bp::arg("total"), bp::arg("text") ), "") );
        ProgressBar_exposer.def( bp::init< QString const &, quint32 >(( bp::arg("text"), bp::arg("total") ), "") );
        ProgressBar_exposer.def( bp::init< QString const & >(( bp::arg("text") ), "") );
        ProgressBar_exposer.def( bp::init< SireBase::ProgressBar const & >(( bp::arg("other") ), "") );
        { //::SireBase::ProgressBar::current
        
            typedef ::quint32 ( ::SireBase::ProgressBar::*current_function_type)(  ) const;
            current_function_type current_function_value( &::SireBase::ProgressBar::current );
            
            ProgressBar_exposer.def( 
                "current"
                , current_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::enter
        
            typedef ::SireBase::ProgressBar ( ::SireBase::ProgressBar::*enter_function_type)(  ) const;
            enter_function_type enter_function_value( &::SireBase::ProgressBar::enter );
            
            ProgressBar_exposer.def( 
                "enter"
                , enter_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::exit
        
            typedef void ( ::SireBase::ProgressBar::*exit_function_type)(  ) ;
            exit_function_type exit_function_value( &::SireBase::ProgressBar::exit );
            
            ProgressBar_exposer.def( 
                "exit"
                , exit_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::failure
        
            typedef void ( ::SireBase::ProgressBar::*failure_function_type)(  ) ;
            failure_function_type failure_function_value( &::SireBase::ProgressBar::failure );
            
            ProgressBar_exposer.def( 
                "failure"
                , failure_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::failure
        
            typedef void ( ::SireBase::ProgressBar::*failure_function_type)( ::QString const & ) ;
            failure_function_type failure_function_value( &::SireBase::ProgressBar::failure );
            
            ProgressBar_exposer.def( 
                "failure"
                , failure_function_value
                , ( bp::arg("message") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::message
        
            typedef ::QString ( ::SireBase::ProgressBar::*message_function_type)(  ) const;
            message_function_type message_function_value( &::SireBase::ProgressBar::message );
            
            ProgressBar_exposer.def( 
                "message"
                , message_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        ProgressBar_exposer.def( bp::self != bp::self );
        { //::SireBase::ProgressBar::operator=
        
            typedef ::SireBase::ProgressBar & ( ::SireBase::ProgressBar::*assign_function_type)( ::SireBase::ProgressBar const & ) ;
            assign_function_type assign_function_value( &::SireBase::ProgressBar::operator= );
            
            ProgressBar_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        ProgressBar_exposer.def( bp::self == bp::self );
        { //::SireBase::ProgressBar::setProgress
        
            typedef void ( ::SireBase::ProgressBar::*setProgress_function_type)( ::quint32 ) ;
            setProgress_function_type setProgress_function_value( &::SireBase::ProgressBar::setProgress );
            
            ProgressBar_exposer.def( 
                "setProgress"
                , setProgress_function_value
                , ( bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::setProgress
        
            typedef void ( ::SireBase::ProgressBar::*setProgress_function_type)( ::quint32,::QString const & ) ;
            setProgress_function_type setProgress_function_value( &::SireBase::ProgressBar::setProgress );
            
            ProgressBar_exposer.def( 
                "setProgress"
                , setProgress_function_value
                , ( bp::arg("value"), bp::arg("text") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::setProgress
        
            typedef void ( ::SireBase::ProgressBar::*setProgress_function_type)( ::QString const &,::quint32 ) ;
            setProgress_function_type setProgress_function_value( &::SireBase::ProgressBar::setProgress );
            
            ProgressBar_exposer.def( 
                "setProgress"
                , setProgress_function_value
                , ( bp::arg("text"), bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::setSilent
        
            typedef void ( *setSilent_function_type )(  );
            setSilent_function_type setSilent_function_value( &::SireBase::ProgressBar::setSilent );
            
            ProgressBar_exposer.def( 
                "setSilent"
                , setSilent_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::setSpeedUnit
        
            typedef void ( ::SireBase::ProgressBar::*setSpeedUnit_function_type)( ::QString const & ) ;
            setSpeedUnit_function_type setSpeedUnit_function_value( &::SireBase::ProgressBar::setSpeedUnit );
            
            ProgressBar_exposer.def( 
                "setSpeedUnit"
                , setSpeedUnit_function_value
                , ( bp::arg("unit") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::setTheme
        
            typedef void ( *setTheme_function_type )( ::QString );
            setTheme_function_type setTheme_function_value( &::SireBase::ProgressBar::setTheme );
            
            ProgressBar_exposer.def( 
                "setTheme"
                , setTheme_function_value
                , ( bp::arg("theme") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::silentTick
        
            typedef void ( ::SireBase::ProgressBar::*silentTick_function_type)(  ) ;
            silentTick_function_type silentTick_function_value( &::SireBase::ProgressBar::silentTick );
            
            ProgressBar_exposer.def( 
                "silentTick"
                , silentTick_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::speedUnit
        
            typedef ::QString ( ::SireBase::ProgressBar::*speedUnit_function_type)(  ) const;
            speedUnit_function_type speedUnit_function_value( &::SireBase::ProgressBar::speedUnit );
            
            ProgressBar_exposer.def( 
                "speedUnit"
                , speedUnit_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::success
        
            typedef void ( ::SireBase::ProgressBar::*success_function_type)(  ) ;
            success_function_type success_function_value( &::SireBase::ProgressBar::success );
            
            ProgressBar_exposer.def( 
                "success"
                , success_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::success
        
            typedef void ( ::SireBase::ProgressBar::*success_function_type)( ::QString const & ) ;
            success_function_type success_function_value( &::SireBase::ProgressBar::success );
            
            ProgressBar_exposer.def( 
                "success"
                , success_function_value
                , ( bp::arg("message") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::tick
        
            typedef void ( ::SireBase::ProgressBar::*tick_function_type)(  ) ;
            tick_function_type tick_function_value( &::SireBase::ProgressBar::tick );
            
            ProgressBar_exposer.def( 
                "tick"
                , tick_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::tick
        
            typedef void ( ::SireBase::ProgressBar::*tick_function_type)( ::QString const & ) ;
            tick_function_type tick_function_value( &::SireBase::ProgressBar::tick );
            
            ProgressBar_exposer.def( 
                "tick"
                , tick_function_value
                , ( bp::arg("text") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::total
        
            typedef ::quint32 ( ::SireBase::ProgressBar::*total_function_type)(  ) const;
            total_function_type total_function_value( &::SireBase::ProgressBar::total );
            
            ProgressBar_exposer.def( 
                "total"
                , total_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireBase::ProgressBar::typeName );
            
            ProgressBar_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::what
        
            typedef char const * ( ::SireBase::ProgressBar::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireBase::ProgressBar::what );
            
            ProgressBar_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        ProgressBar_exposer.staticmethod( "setSilent" );
        ProgressBar_exposer.staticmethod( "setTheme" );
        ProgressBar_exposer.staticmethod( "typeName" );
        ProgressBar_exposer.def( "__copy__", &__copy__);
        ProgressBar_exposer.def( "__deepcopy__", &__copy__);
        ProgressBar_exposer.def( "clone", &__copy__);
        ProgressBar_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireBase::ProgressBar >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ProgressBar_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireBase::ProgressBar >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ProgressBar_exposer.def_pickle(sire_pickle_suite< ::SireBase::ProgressBar >());
        ProgressBar_exposer.def( "__str__", &__str__< ::SireBase::ProgressBar > );
        ProgressBar_exposer.def( "__repr__", &__str__< ::SireBase::ProgressBar > );
    }

}
