// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "Chirality.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "chirality.h"

#include <QDebug>

#include "chirality.h"

SireMol::Chirality __copy__(const SireMol::Chirality &other){ return SireMol::Chirality(other); }

#include "Helpers/copy.hpp"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_Chirality_class(){

    { //::SireMol::Chirality
        typedef bp::class_< SireMol::Chirality, bp::bases< SireBase::Property > > Chirality_exposer_t;
        Chirality_exposer_t Chirality_exposer = Chirality_exposer_t( "Chirality", "This class represents an atoms chirality\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor (default is an undefined chirality)") );
        bp::scope Chirality_scope( Chirality_exposer );
        Chirality_exposer.def( bp::init< SireMol::Chirality const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMol::Chirality::clockwise
        
            typedef ::SireMol::Chirality ( *clockwise_function_type )(  );
            clockwise_function_type clockwise_function_value( &::SireMol::Chirality::clockwise );
            
            Chirality_exposer.def( 
                "clockwise"
                , clockwise_function_value
                , bp::release_gil_policy()
                , "Return a clockwise Chirality" );
        
        }
        { //::SireMol::Chirality::counterClockwise
        
            typedef ::SireMol::Chirality ( *counterClockwise_function_type )(  );
            counterClockwise_function_type counterClockwise_function_value( &::SireMol::Chirality::counterClockwise );
            
            Chirality_exposer.def( 
                "counterClockwise"
                , counterClockwise_function_value
                , bp::release_gil_policy()
                , "Return a counter-clockwise Chirality" );
        
        }
        { //::SireMol::Chirality::fromRDKit
        
            typedef ::SireMol::Chirality ( *fromRDKit_function_type )( ::QString const & );
            fromRDKit_function_type fromRDKit_function_value( &::SireMol::Chirality::fromRDKit );
            
            Chirality_exposer.def( 
                "fromRDKit"
                , fromRDKit_function_value
                , ( bp::arg("value") )
                , bp::release_gil_policy()
                , "Construct from a string representation of a RDKit chirality" );
        
        }
        { //::SireMol::Chirality::fromSDF
        
            typedef ::SireMol::Chirality ( *fromSDF_function_type )( int );
            fromSDF_function_type fromSDF_function_value( &::SireMol::Chirality::fromSDF );
            
            Chirality_exposer.def( 
                "fromSDF"
                , fromSDF_function_value
                , ( bp::arg("val") )
                , bp::release_gil_policy()
                , "Construct from the the passed SDF number" );
        
        }
        { //::SireMol::Chirality::isClockwise
        
            typedef bool ( ::SireMol::Chirality::*isClockwise_function_type)(  ) const;
            isClockwise_function_type isClockwise_function_value( &::SireMol::Chirality::isClockwise );
            
            Chirality_exposer.def( 
                "isClockwise"
                , isClockwise_function_value
                , bp::release_gil_policy()
                , "Return whether or not this is a clockwise chirality" );
        
        }
        { //::SireMol::Chirality::isCounterClockwise
        
            typedef bool ( ::SireMol::Chirality::*isCounterClockwise_function_type)(  ) const;
            isCounterClockwise_function_type isCounterClockwise_function_value( &::SireMol::Chirality::isCounterClockwise );
            
            Chirality_exposer.def( 
                "isCounterClockwise"
                , isCounterClockwise_function_value
                , bp::release_gil_policy()
                , "Return whether or not this is a counter-clockwise chirality" );
        
        }
        { //::SireMol::Chirality::isOther
        
            typedef bool ( ::SireMol::Chirality::*isOther_function_type)(  ) const;
            isOther_function_type isOther_function_value( &::SireMol::Chirality::isOther );
            
            Chirality_exposer.def( 
                "isOther"
                , isOther_function_value
                , bp::release_gil_policy()
                , "Return whether or not this is an other chirality" );
        
        }
        { //::SireMol::Chirality::isUndefined
        
            typedef bool ( ::SireMol::Chirality::*isUndefined_function_type)(  ) const;
            isUndefined_function_type isUndefined_function_value( &::SireMol::Chirality::isUndefined );
            
            Chirality_exposer.def( 
                "isUndefined"
                , isUndefined_function_value
                , bp::release_gil_policy()
                , "Return whether or not the stereoscopy is undefined" );
        
        }
        Chirality_exposer.def( bp::self != bp::self );
        { //::SireMol::Chirality::operator=
        
            typedef ::SireMol::Chirality & ( ::SireMol::Chirality::*assign_function_type)( ::SireMol::Chirality const & ) ;
            assign_function_type assign_function_value( &::SireMol::Chirality::operator= );
            
            Chirality_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        Chirality_exposer.def( bp::self == bp::self );
        { //::SireMol::Chirality::other
        
            typedef ::SireMol::Chirality ( *other_function_type )(  );
            other_function_type other_function_value( &::SireMol::Chirality::other );
            
            Chirality_exposer.def( 
                "other"
                , other_function_value
                , bp::release_gil_policy()
                , "Return an other Chirality" );
        
        }
        { //::SireMol::Chirality::toRDKit
        
            typedef ::QString ( ::SireMol::Chirality::*toRDKit_function_type)(  ) const;
            toRDKit_function_type toRDKit_function_value( &::SireMol::Chirality::toRDKit );
            
            Chirality_exposer.def( 
                "toRDKit"
                , toRDKit_function_value
                , bp::release_gil_policy()
                , "Return a string representation of the RDKit stereo value" );
        
        }
        { //::SireMol::Chirality::toSDF
        
            typedef int ( ::SireMol::Chirality::*toSDF_function_type)(  ) const;
            toSDF_function_type toSDF_function_value( &::SireMol::Chirality::toSDF );
            
            Chirality_exposer.def( 
                "toSDF"
                , toSDF_function_value
                , bp::release_gil_policy()
                , "Return the SDF-format value for this bond. This returns\n0 if the stereoscopy is undefined\n" );
        
        }
        { //::SireMol::Chirality::toString
        
            typedef ::QString ( ::SireMol::Chirality::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMol::Chirality::toString );
            
            Chirality_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::Chirality::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::Chirality::typeName );
            
            Chirality_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::Chirality::undefined
        
            typedef ::SireMol::Chirality ( *undefined_function_type )(  );
            undefined_function_type undefined_function_value( &::SireMol::Chirality::undefined );
            
            Chirality_exposer.def( 
                "undefined"
                , undefined_function_value
                , bp::release_gil_policy()
                , "Return an undefined Chirality" );
        
        }
        Chirality_exposer.staticmethod( "clockwise" );
        Chirality_exposer.staticmethod( "counterClockwise" );
        Chirality_exposer.staticmethod( "fromRDKit" );
        Chirality_exposer.staticmethod( "fromSDF" );
        Chirality_exposer.staticmethod( "other" );
        Chirality_exposer.staticmethod( "typeName" );
        Chirality_exposer.staticmethod( "undefined" );
        Chirality_exposer.def( "__copy__", &__copy__<SireMol::Chirality>);
        Chirality_exposer.def( "__deepcopy__", &__copy__<SireMol::Chirality>);
        Chirality_exposer.def( "clone", &__copy__<SireMol::Chirality>);
        Chirality_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::Chirality >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Chirality_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::Chirality >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Chirality_exposer.def_pickle(sire_pickle_suite< ::SireMol::Chirality >());
        Chirality_exposer.def( "__str__", &__str__< ::SireMol::Chirality > );
        Chirality_exposer.def( "__repr__", &__str__< ::SireMol::Chirality > );
    }

}
