// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "CMAPID.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/property.h"

#include "SireID/index.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "cmapid.h"

#include "moleculeinfodata.h"

#include "cmapid.h"

SireMol::CMAPID __copy__(const SireMol::CMAPID &other){ return SireMol::CMAPID(other); }

#include "Helpers/copy.hpp"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_CMAPID_class(){

    { //::SireMol::CMAPID
        typedef bp::class_< SireMol::CMAPID, bp::bases< SireID::ID > > CMAPID_exposer_t;
        CMAPID_exposer_t CMAPID_exposer = CMAPID_exposer_t( "CMAPID", "This class provides a generic ID for a cmap between\nfive atoms\n\nAuthor: Christopher Woods\n", bp::init< >("Null constructor") );
        bp::scope CMAPID_scope( CMAPID_exposer );
        CMAPID_exposer.def( bp::init< SireMol::AtomID const &, SireMol::AtomID const &, SireMol::AtomID const &, SireMol::AtomID const &, SireMol::AtomID const & >(( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("atom4") ), "Construct a cmap between the two specified atoms. The order\nis important, as this cmap may be between two different\nmolecules") );
        CMAPID_exposer.def( bp::init< SireMol::CMAPID const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMol::CMAPID::atom0
        
            typedef ::SireMol::AtomID const & ( ::SireMol::CMAPID::*atom0_function_type)(  ) const;
            atom0_function_type atom0_function_value( &::SireMol::CMAPID::atom0 );
            
            CMAPID_exposer.def( 
                "atom0"
                , atom0_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the ID of the first atom of the cmap" );
        
        }
        { //::SireMol::CMAPID::atom1
        
            typedef ::SireMol::AtomID const & ( ::SireMol::CMAPID::*atom1_function_type)(  ) const;
            atom1_function_type atom1_function_value( &::SireMol::CMAPID::atom1 );
            
            CMAPID_exposer.def( 
                "atom1"
                , atom1_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the ID of the second atom of the cmap" );
        
        }
        { //::SireMol::CMAPID::atom2
        
            typedef ::SireMol::AtomID const & ( ::SireMol::CMAPID::*atom2_function_type)(  ) const;
            atom2_function_type atom2_function_value( &::SireMol::CMAPID::atom2 );
            
            CMAPID_exposer.def( 
                "atom2"
                , atom2_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the ID of the third atom of the cmap" );
        
        }
        { //::SireMol::CMAPID::atom3
        
            typedef ::SireMol::AtomID const & ( ::SireMol::CMAPID::*atom3_function_type)(  ) const;
            atom3_function_type atom3_function_value( &::SireMol::CMAPID::atom3 );
            
            CMAPID_exposer.def( 
                "atom3"
                , atom3_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the ID of the fourth atom of the cmap" );
        
        }
        { //::SireMol::CMAPID::atom4
        
            typedef ::SireMol::AtomID const & ( ::SireMol::CMAPID::*atom4_function_type)(  ) const;
            atom4_function_type atom4_function_value( &::SireMol::CMAPID::atom4 );
            
            CMAPID_exposer.def( 
                "atom4"
                , atom4_function_value
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "Return the ID of the fifth atom of the cmap" );
        
        }
        { //::SireMol::CMAPID::hash
        
            typedef ::uint ( ::SireMol::CMAPID::*hash_function_type)(  ) const;
            hash_function_type hash_function_value( &::SireMol::CMAPID::hash );
            
            CMAPID_exposer.def( 
                "hash"
                , hash_function_value
                , bp::release_gil_policy()
                , "Return a hash for this ID" );
        
        }
        { //::SireMol::CMAPID::isNull
        
            typedef bool ( ::SireMol::CMAPID::*isNull_function_type)(  ) const;
            isNull_function_type isNull_function_value( &::SireMol::CMAPID::isNull );
            
            CMAPID_exposer.def( 
                "isNull"
                , isNull_function_value
                , bp::release_gil_policy()
                , "Return whether this is a null ID" );
        
        }
        { //::SireMol::CMAPID::map
        
            typedef ::boost::tuples::tuple< SireMol::AtomIdx, SireMol::AtomIdx, SireMol::AtomIdx, SireMol::AtomIdx, SireMol::AtomIdx, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::SireMol::CMAPID::*map_function_type)( ::SireMol::MoleculeInfoData const & ) const;
            map_function_type map_function_value( &::SireMol::CMAPID::map );
            
            CMAPID_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molinfo") )
                , bp::release_gil_policy()
                , "Return the indicies of the five atoms in this cmap - this returns\nthem in the order\ntuple(cmap.atom0(),cmap.atom1(),cmap.atom2(),cmap.atom3(),cmap.atom4())\nThrow: SireMol::missing_atom\nThrow: SireMol::duplicate_atom\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::CMAPID::map
        
            typedef ::boost::tuples::tuple< SireMol::AtomIdx, SireMol::AtomIdx, SireMol::AtomIdx, SireMol::AtomIdx, SireMol::AtomIdx, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::SireMol::CMAPID::*map_function_type)( ::SireMol::MoleculeInfoData const &,::SireMol::MoleculeInfoData const &,::SireMol::MoleculeInfoData const &,::SireMol::MoleculeInfoData const &,::SireMol::MoleculeInfoData const & ) const;
            map_function_type map_function_value( &::SireMol::CMAPID::map );
            
            CMAPID_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("mol0info"), bp::arg("mol1info"), bp::arg("mol2info"), bp::arg("mol3info"), bp::arg("mol4info") )
                , bp::release_gil_policy()
                , "Return the indicies of the five atoms of this cmap, between the\ntwo molecules whose data is in mol0info (containing cmap.atom0()),\nmol1info (containing cmap.atom1()), mol2info (containing\ncmap.atom2()), mol3info (containing cmap.atom3()) and\nmol4info (containing cmap.atom4())\nThrow: SireMol::missing_atom\nThrow: SireMol::duplicate_atom\nThrow: SireError::invalid_index\n" );
        
        }
        { //::SireMol::CMAPID::mirror
        
            typedef ::SireMol::CMAPID ( ::SireMol::CMAPID::*mirror_function_type)(  ) const;
            mirror_function_type mirror_function_value( &::SireMol::CMAPID::mirror );
            
            CMAPID_exposer.def( 
                "mirror"
                , mirror_function_value
                , bp::release_gil_policy()
                , "Return the mirror of this CMAPID - i.e. if this is\nCMAPID(atom0, atom1, atom2, atom3, atom4), this returns\nCMAPID(atom4, atom3, atom2, atom1, atom0).\nThis is useful if you know that CMAPID(atom0,atom1,atom2,atom3,atom4) equals\n" );
        
        }
        CMAPID_exposer.def( bp::self != bp::other< SireID::ID >() );
        CMAPID_exposer.def( bp::self != bp::self );
        { //::SireMol::CMAPID::operator=
        
            typedef ::SireMol::CMAPID & ( ::SireMol::CMAPID::*assign_function_type)( ::SireMol::CMAPID const & ) ;
            assign_function_type assign_function_value( &::SireMol::CMAPID::operator= );
            
            CMAPID_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        CMAPID_exposer.def( bp::self == bp::other< SireID::ID >() );
        CMAPID_exposer.def( bp::self == bp::self );
        { //::SireMol::CMAPID::operator[]
        
            typedef ::SireMol::AtomID const & ( ::SireMol::CMAPID::*__getitem___function_type)( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::CMAPID::operator[] );
            
            CMAPID_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , bp::return_value_policy<bp::clone_const_reference, bp::release_gil_policy>()
                , "" );
        
        }
        { //::SireMol::CMAPID::toString
        
            typedef ::QString ( ::SireMol::CMAPID::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMol::CMAPID::toString );
            
            CMAPID_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation of this ID" );
        
        }
        { //::SireMol::CMAPID::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::CMAPID::typeName );
            
            CMAPID_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::CMAPID::what
        
            typedef char const * ( ::SireMol::CMAPID::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMol::CMAPID::what );
            
            CMAPID_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        CMAPID_exposer.staticmethod( "typeName" );
        CMAPID_exposer.def( "__copy__", &__copy__<SireMol::CMAPID>);
        CMAPID_exposer.def( "__deepcopy__", &__copy__<SireMol::CMAPID>);
        CMAPID_exposer.def( "clone", &__copy__<SireMol::CMAPID>);
        CMAPID_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::CMAPID >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CMAPID_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::CMAPID >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CMAPID_exposer.def_pickle(sire_pickle_suite< ::SireMol::CMAPID >());
        CMAPID_exposer.def( "__str__", &__str__< ::SireMol::CMAPID > );
        CMAPID_exposer.def( "__repr__", &__str__< ::SireMol::CMAPID > );
        CMAPID_exposer.def( "__hash__", &::SireMol::CMAPID::hash );
    }

}
