// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "AtomCoordMatcher.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMaths/vector.h"

#include "SireStream/datastream.h"

#include "SireUnits/units.h"

#include "atom.h"

#include "atomidentifier.h"

#include "atomidx.h"

#include "atommatcher.h"

#include "atommatchers.h"

#include "atomname.h"

#include "atomselection.h"

#include "evaluator.h"

#include "moleculeinfodata.h"

#include "moleculeview.h"

#include "mover.h"

#include "mover.hpp"

#include "selector.hpp"

#include "tostring.h"

#include "atommatchers.h"

SireMol::AtomCoordMatcher __copy__(const SireMol::AtomCoordMatcher &other){ return SireMol::AtomCoordMatcher(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_AtomCoordMatcher_class(){

    { //::SireMol::AtomCoordMatcher
        typedef bp::class_< SireMol::AtomCoordMatcher, bp::bases< SireMol::AtomMatcher, SireBase::Property > > AtomCoordMatcher_exposer_t;
        AtomCoordMatcher_exposer_t AtomCoordMatcher_exposer = AtomCoordMatcher_exposer_t( "AtomCoordMatcher", "This is a simple atom matcher that matches the atoms based\non their coordinates - e.g. matches the atom in molinfo0\nto those in molinfo1 by their closest coordinates.\n\nAuthor: Lester Hedges\n", bp::init< >("Constructor") );
        bp::scope AtomCoordMatcher_scope( AtomCoordMatcher_exposer );
        AtomCoordMatcher_exposer.def( bp::init< bool >(( bp::arg("zero_com") ), "Constructor") );
        AtomCoordMatcher_exposer.def( bp::init< SireMol::AtomCoordMatcher const & >(( bp::arg("arg0") ), "Copy constructor") );
        AtomCoordMatcher_exposer.def( bp::self != bp::self );
        { //::SireMol::AtomCoordMatcher::operator=
        
            typedef ::SireMol::AtomCoordMatcher & ( ::SireMol::AtomCoordMatcher::*assign_function_type)( ::SireMol::AtomCoordMatcher const & ) ;
            assign_function_type assign_function_value( &::SireMol::AtomCoordMatcher::operator= );
            
            AtomCoordMatcher_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        AtomCoordMatcher_exposer.def( bp::self == bp::self );
        { //::SireMol::AtomCoordMatcher::toString
        
            typedef ::QString ( ::SireMol::AtomCoordMatcher::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMol::AtomCoordMatcher::toString );
            
            AtomCoordMatcher_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::AtomCoordMatcher::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::AtomCoordMatcher::typeName );
            
            AtomCoordMatcher_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::AtomCoordMatcher::what
        
            typedef char const * ( ::SireMol::AtomCoordMatcher::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMol::AtomCoordMatcher::what );
            
            AtomCoordMatcher_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        AtomCoordMatcher_exposer.staticmethod( "typeName" );
        AtomCoordMatcher_exposer.def( "__copy__", &__copy__);
        AtomCoordMatcher_exposer.def( "__deepcopy__", &__copy__);
        AtomCoordMatcher_exposer.def( "clone", &__copy__);
        AtomCoordMatcher_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::AtomCoordMatcher >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomCoordMatcher_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::AtomCoordMatcher >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomCoordMatcher_exposer.def_pickle(sire_pickle_suite< ::SireMol::AtomCoordMatcher >());
        AtomCoordMatcher_exposer.def( "__str__", &__str__< ::SireMol::AtomCoordMatcher > );
        AtomCoordMatcher_exposer.def( "__repr__", &__str__< ::SireMol::AtomCoordMatcher > );
    }

}
