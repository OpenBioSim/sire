// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "AmberRst.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/generalunitproperty.h"

#include "SireBase/getinstalldir.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireBase/stringproperty.h"

#include "SireBase/timeproperty.h"

#include "SireError/errors.h"

#include "SireIO/amberrst.h"

#include "SireIO/errors.h"

#include "SireIO/netcdffile.h"

#include "SireIO/xdrfile.h"

#include "SireMol/atomcoords.h"

#include "SireMol/atomvelocities.h"

#include "SireMol/core.h"

#include "SireMol/mgname.h"

#include "SireMol/molecule.h"

#include "SireMol/moleditor.h"

#include "SireMol/molidx.h"

#include "SireMol/trajectory.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "SireUnits/dimensions.h"

#include "SireUnits/units.h"

#include "SireVol/periodicbox.h"

#include "SireVol/triclinicbox.h"

#include "amberrst.h"

#include "tostring.h"

#include <QDebug>

#include "amberrst.h"

SireIO::AmberRst __copy__(const SireIO::AmberRst &other){ return SireIO::AmberRst(other); }

#include "Helpers/copy.hpp"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

void register_AmberRst_class(){

    { //::SireIO::AmberRst
        typedef bp::class_< SireIO::AmberRst, bp::bases< SireIO::MoleculeParser, SireBase::Property > > AmberRst_exposer_t;
        AmberRst_exposer_t AmberRst_exposer = AmberRst_exposer_t( "AmberRst", "This class represents an Amber-format restartcoordinate file (binary),\ncurrently supporting these files from Amber7 to Amber16.\n\nThis is a netcdf file format, which is described here;\n\nhttp:ambermd.orgnetcdfnctraj.xhtml\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope AmberRst_scope( AmberRst_exposer );
        AmberRst_exposer.def( bp::init< QString const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("filename"), bp::arg("map")=SireBase::PropertyMap() ), "Construct by parsing the passed file") );
        AmberRst_exposer.def( bp::init< QStringList const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("lines"), bp::arg("map")=SireBase::PropertyMap() ), "Construct by parsing the data in the passed text lines") );
        AmberRst_exposer.def( bp::init< SireSystem::System const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("system"), bp::arg("map")=SireBase::PropertyMap() ), "Construct by extracting the necessary data from the passed System") );
        AmberRst_exposer.def( bp::init< SireIO::AmberRst const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireIO::AmberRst::construct
        
            typedef ::SireIO::MoleculeParserPtr ( ::SireIO::AmberRst::*construct_function_type)( ::QString const &,::SireBase::PropertyMap const & ) const;
            construct_function_type construct_function_value( &::SireIO::AmberRst::construct );
            
            AmberRst_exposer.def( 
                "construct"
                , construct_function_value
                , ( bp::arg("filename"), bp::arg("map") )
                , bp::release_gil_policy()
                , "Return this parser constructed from the passed filename" );
        
        }
        { //::SireIO::AmberRst::construct
        
            typedef ::SireIO::MoleculeParserPtr ( ::SireIO::AmberRst::*construct_function_type)( ::QStringList const &,::SireBase::PropertyMap const & ) const;
            construct_function_type construct_function_value( &::SireIO::AmberRst::construct );
            
            AmberRst_exposer.def( 
                "construct"
                , construct_function_value
                , ( bp::arg("lines"), bp::arg("map") )
                , bp::release_gil_policy()
                , "Return this parser constructed from the passed set of lines" );
        
        }
        { //::SireIO::AmberRst::construct
        
            typedef ::SireIO::MoleculeParserPtr ( ::SireIO::AmberRst::*construct_function_type)( ::SireSystem::System const &,::SireBase::PropertyMap const & ) const;
            construct_function_type construct_function_value( &::SireIO::AmberRst::construct );
            
            AmberRst_exposer.def( 
                "construct"
                , construct_function_value
                , ( bp::arg("system"), bp::arg("map") )
                , bp::release_gil_policy()
                , "Return this parser constructed from the passed SireSystem::System" );
        
        }
        { //::SireIO::AmberRst::count
        
            typedef int ( ::SireIO::AmberRst::*count_function_type)(  ) const;
            count_function_type count_function_value( &::SireIO::AmberRst::count );
            
            AmberRst_exposer.def( 
                "count"
                , count_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::AmberRst::formatDescription
        
            typedef ::QString ( ::SireIO::AmberRst::*formatDescription_function_type)(  ) const;
            formatDescription_function_type formatDescription_function_value( &::SireIO::AmberRst::formatDescription );
            
            AmberRst_exposer.def( 
                "formatDescription"
                , formatDescription_function_value
                , bp::release_gil_policy()
                , "Return a description of the file format" );
        
        }
        { //::SireIO::AmberRst::formatName
        
            typedef ::QString ( ::SireIO::AmberRst::*formatName_function_type)(  ) const;
            formatName_function_type formatName_function_value( &::SireIO::AmberRst::formatName );
            
            AmberRst_exposer.def( 
                "formatName"
                , formatName_function_value
                , bp::release_gil_policy()
                , "Return the format name that is used to identify this file format within Sire" );
        
        }
        { //::SireIO::AmberRst::formatSuffix
        
            typedef ::QStringList ( ::SireIO::AmberRst::*formatSuffix_function_type)(  ) const;
            formatSuffix_function_type formatSuffix_function_value( &::SireIO::AmberRst::formatSuffix );
            
            AmberRst_exposer.def( 
                "formatSuffix"
                , formatSuffix_function_value
                , bp::release_gil_policy()
                , "Return the suffixes that AmberRst files will typically have" );
        
        }
        { //::SireIO::AmberRst::getFrame
        
            typedef ::SireMol::Frame ( ::SireIO::AmberRst::*getFrame_function_type)( int ) const;
            getFrame_function_type getFrame_function_value( &::SireIO::AmberRst::getFrame );
            
            AmberRst_exposer.def( 
                "getFrame"
                , getFrame_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::AmberRst::isFrame
        
            typedef bool ( ::SireIO::AmberRst::*isFrame_function_type)(  ) const;
            isFrame_function_type isFrame_function_value( &::SireIO::AmberRst::isFrame );
            
            AmberRst_exposer.def( 
                "isFrame"
                , isFrame_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::AmberRst::isTextFile
        
            typedef bool ( ::SireIO::AmberRst::*isTextFile_function_type)(  ) const;
            isTextFile_function_type isTextFile_function_value( &::SireIO::AmberRst::isTextFile );
            
            AmberRst_exposer.def( 
                "isTextFile"
                , isTextFile_function_value
                , bp::release_gil_policy()
                , "This is not a text file" );
        
        }
        { //::SireIO::AmberRst::nAtoms
        
            typedef int ( ::SireIO::AmberRst::*nAtoms_function_type)(  ) const;
            nAtoms_function_type nAtoms_function_value( &::SireIO::AmberRst::nAtoms );
            
            AmberRst_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , bp::release_gil_policy()
                , "Return the number of atoms whose coordinates are contained in this restart file" );
        
        }
        { //::SireIO::AmberRst::nFrames
        
            typedef int ( ::SireIO::AmberRst::*nFrames_function_type)(  ) const;
            nFrames_function_type nFrames_function_value( &::SireIO::AmberRst::nFrames );
            
            AmberRst_exposer.def( 
                "nFrames"
                , nFrames_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        AmberRst_exposer.def( bp::self != bp::self );
        { //::SireIO::AmberRst::operator=
        
            typedef ::SireIO::AmberRst & ( ::SireIO::AmberRst::*assign_function_type)( ::SireIO::AmberRst const & ) ;
            assign_function_type assign_function_value( &::SireIO::AmberRst::operator= );
            
            AmberRst_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        AmberRst_exposer.def( bp::self == bp::self );
        { //::SireIO::AmberRst::operator[]
        
            typedef ::SireIO::AmberRst ( ::SireIO::AmberRst::*__getitem___function_type)( int ) const;
            __getitem___function_type __getitem___function_value( &::SireIO::AmberRst::operator[] );
            
            AmberRst_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , "" );
        
        }
        { //::SireIO::AmberRst::parse
        
            typedef ::SireIO::AmberRst ( *parse_function_type )( ::QString const & );
            parse_function_type parse_function_value( &::SireIO::AmberRst::parse );
            
            AmberRst_exposer.def( 
                "parse"
                , parse_function_value
                , ( bp::arg("filename") )
                , bp::release_gil_policy()
                , "Parse from the passed file" );
        
        }
        { //::SireIO::AmberRst::size
        
            typedef int ( ::SireIO::AmberRst::*size_function_type)(  ) const;
            size_function_type size_function_value( &::SireIO::AmberRst::size );
            
            AmberRst_exposer.def( 
                "size"
                , size_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::AmberRst::toString
        
            typedef ::QString ( ::SireIO::AmberRst::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireIO::AmberRst::toString );
            
            AmberRst_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::AmberRst::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::AmberRst::typeName );
            
            AmberRst_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::AmberRst::what
        
            typedef char const * ( ::SireIO::AmberRst::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireIO::AmberRst::what );
            
            AmberRst_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireIO::AmberRst::writeToFile
        
            typedef ::QStringList ( ::SireIO::AmberRst::*writeToFile_function_type)( ::QString const & ) const;
            writeToFile_function_type writeToFile_function_value( &::SireIO::AmberRst::writeToFile );
            
            AmberRst_exposer.def( 
                "writeToFile"
                , writeToFile_function_value
                , ( bp::arg("filename") )
                , bp::release_gil_policy()
                , "Write this binary file filename" );
        
        }
        AmberRst_exposer.staticmethod( "parse" );
        AmberRst_exposer.staticmethod( "typeName" );
        AmberRst_exposer.def( "__copy__", &__copy__<SireIO::AmberRst>);
        AmberRst_exposer.def( "__deepcopy__", &__copy__<SireIO::AmberRst>);
        AmberRst_exposer.def( "clone", &__copy__<SireIO::AmberRst>);
        AmberRst_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::AmberRst >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AmberRst_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::AmberRst >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AmberRst_exposer.def_pickle(sire_pickle_suite< ::SireIO::AmberRst >());
        AmberRst_exposer.def( "__str__", &__str__< ::SireIO::AmberRst > );
        AmberRst_exposer.def( "__repr__", &__str__< ::SireIO::AmberRst > );
        AmberRst_exposer.def( "__len__", &__len_size< ::SireIO::AmberRst > );
    }

}
