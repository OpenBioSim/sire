// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "TorchQMForce.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMaths/vector.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/triclinicbox.h"

#include "openmm/serialization/SerializationNode.h"

#include "openmm/serialization/SerializationProxy.h"

#include "torchqm.h"

#include "SireError/errors.h"

#include "SireMaths/vector.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/triclinicbox.h"

#include "openmm/serialization/SerializationNode.h"

#include "openmm/serialization/SerializationProxy.h"

#include "torchqm.h"

SireOpenMM::TorchQMForce __copy__(const SireOpenMM::TorchQMForce &other){ return SireOpenMM::TorchQMForce(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireOpenMM::TorchQMForce&){ return "SireOpenMM::TorchQMForce";}

#include "Helpers/release_gil_policy.hpp"

void register_TorchQMForce_class(){

    { //::SireOpenMM::TorchQMForce
        typedef bp::class_< SireOpenMM::TorchQMForce, bp::bases< SireOpenMM::QMForce > > TorchQMForce_exposer_t;
        TorchQMForce_exposer_t TorchQMForce_exposer = TorchQMForce_exposer_t( "TorchQMForce", "", bp::init< >("Default constructor.") );
        bp::scope TorchQMForce_scope( TorchQMForce_exposer );
        TorchQMForce_exposer.def( bp::init< QString, SireUnits::Dimension::Length, int, bool, double, QVector< int >, QMap< int, int >, QMap< int, QVector< int > >, QMap< int, double >, QVector< int >, QVector< int >, QVector< double > >(( bp::arg("module_path"), bp::arg("cutoff"), bp::arg("neighbour_list_frequency"), bp::arg("is_mechanical"), bp::arg("lambda"), bp::arg("atoms"), bp::arg("mm1_to_qm"), bp::arg("mm1_to_mm2"), bp::arg("bond_scale_factors"), bp::arg("mm2_atoms"), bp::arg("numbers"), bp::arg("charges") ), "Constructor.\nPar:am module_path\nThe path to the serialised TorchScript module.\n\nPar:am cutoff\nThe ML cutoff distance.\n\nPar:am neighbour_list_frequency\nThe frequency at which the neighbour list is updated. (Number of steps.)\nIf zero, then no neighbour list is used.\n\nPar:am is_mechanical\nA flag to indicate if mechanical embedding is being used.\n\nPar:am lambda\nThe lambda weighting factor. This can be used to interpolate between\npotentials for end-state correction calculations.\n\nPar:am atoms\nA vector of atom indices for the QM region.\n\nPar:am mm1_to_qm\nA dictionary mapping link atom (MM1) indices to the QM atoms to\nwhich they are bonded.\n\nPar:am mm1_to_mm2\nA dictionary of link atoms indices (MM1) to a list of the MM\natoms to which they are bonded (MM2).\n\nPar:am bond_scale_factors\nA dictionary of link atom indices (MM1) to a list of the bond\nlength scale factors between the QM and MM1 atoms. The scale\nfactors are the ratio of the equilibrium bond lengths for the\nQM-L (QM-link) atom and QM-MM1 atom, i.e. R0(QM-L)  R0(QM-MM1),\ntaken from the MM force field parameters for the molecule.\n\nPar:am mm2_atoms\nA vector of MM2 atom indices.\n\nPar:am numbers\nA vector of atomic charges for all atoms in the system.\n\nPar:am charges\nA vector of atomic charges for all atoms in the system.\n") );
        TorchQMForce_exposer.def( bp::init< SireOpenMM::TorchQMForce const & >(( bp::arg("other") ), "Copy constructor.") );
        { //::SireOpenMM::TorchQMForce::getModulePath
        
            typedef ::QString ( ::SireOpenMM::TorchQMForce::*getModulePath_function_type)(  ) const;
            getModulePath_function_type getModulePath_function_value( &::SireOpenMM::TorchQMForce::getModulePath );
            
            TorchQMForce_exposer.def( 
                "getModulePath"
                , getModulePath_function_value
                , bp::release_gil_policy()
                , "Get the path to the serialised TorchScript module.\n" );
        
        }
        { //::SireOpenMM::TorchQMForce::getAtoms
        
            typedef ::QVector< int > ( ::SireOpenMM::TorchQMForce::*getAtoms_function_type)(  ) const;
            getAtoms_function_type getAtoms_function_value( &::SireOpenMM::TorchQMForce::getAtoms );
            
            TorchQMForce_exposer.def( 
                "getAtoms"
                , getAtoms_function_value
                , bp::release_gil_policy()
                , "Get the indices of the atoms in the QM region.\nReturn:s\nA vector of atom indices for the QM region.\n" );
        
        }
        { //::SireOpenMM::TorchQMForce::getCharges
        
            typedef ::QVector< double > ( ::SireOpenMM::TorchQMForce::*getCharges_function_type)(  ) const;
            getCharges_function_type getCharges_function_value( &::SireOpenMM::TorchQMForce::getCharges );
            
            TorchQMForce_exposer.def( 
                "getCharges"
                , getCharges_function_value
                , bp::release_gil_policy()
                , "Get the atomic charges of all atoms in the system.\nReturn:s\nA vector of atomic charges for all atoms in the system.\n" );
        
        }
        { //::SireOpenMM::TorchQMForce::getCutoff
        
            typedef ::SireUnits::Dimension::Length ( ::SireOpenMM::TorchQMForce::*getCutoff_function_type)(  ) const;
            getCutoff_function_type getCutoff_function_value( &::SireOpenMM::TorchQMForce::getCutoff );
            
            TorchQMForce_exposer.def( 
                "getCutoff"
                , getCutoff_function_value
                , bp::release_gil_policy()
                , "Get the QM cutoff distance.\nReturn:s\nThe QM cutoff distance.\n" );
        
        }
        { //::SireOpenMM::TorchQMForce::getIsMechanical
        
            typedef bool ( ::SireOpenMM::TorchQMForce::*getIsMechanical_function_type)(  ) const;
            getIsMechanical_function_type getIsMechanical_function_value( &::SireOpenMM::TorchQMForce::getIsMechanical );
            
            TorchQMForce_exposer.def( 
                "getIsMechanical"
                , getIsMechanical_function_value
                , bp::release_gil_policy()
                , "Get the mechanical embedding flag.\nReturn:s\nA flag to indicate if mechanical embedding is being used.\n" );
        
        }
        { //::SireOpenMM::TorchQMForce::getLambda
        
            typedef double ( ::SireOpenMM::TorchQMForce::*getLambda_function_type)(  ) const;
            getLambda_function_type getLambda_function_value( &::SireOpenMM::TorchQMForce::getLambda );
            
            TorchQMForce_exposer.def( 
                "getLambda"
                , getLambda_function_value
                , bp::release_gil_policy()
                , "Get the lambda weighting factor.\nReturn:s\nThe lambda weighting factor.\n" );
        
        }
        { //::SireOpenMM::TorchQMForce::getLinkAtoms
        
            typedef ::boost::tuples::tuple< QMap< int, int >, QMap< int, QVector< int > >, QMap< int, double >, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::SireOpenMM::TorchQMForce::*getLinkAtoms_function_type)(  ) const;
            getLinkAtoms_function_type getLinkAtoms_function_value( &::SireOpenMM::TorchQMForce::getLinkAtoms );
            
            TorchQMForce_exposer.def( 
                "getLinkAtoms"
                , getLinkAtoms_function_value
                , bp::release_gil_policy()
                , "Get the link atoms associated with each QM atom.\nReturn:s\nA tuple containing:\n\nmm1_to_qm\nA dictionary mapping link atom (MM1) indices to the QM atoms to\nwhich they are bonded.\n\nmm1_to_mm2\nA dictionary of link atoms indices (MM1) to a list of the MM\natoms to which they are bonded (MM2).\n\nbond_scale_factors\nA dictionary of link atom indices (MM1) to a list of the bond\nlength scale factors between the QM and MM1 atoms. The scale\nfactors are the ratio of the equilibrium bond lengths for the\nQM-L (QM-link) atom and QM-MM1 atom, i.e. R0(QM-L)  R0(QM-MM1),\ntaken from the MM force field parameters for the molecule.\n\n" );
        
        }
        { //::SireOpenMM::TorchQMForce::getMM2Atoms
        
            typedef ::QVector< int > ( ::SireOpenMM::TorchQMForce::*getMM2Atoms_function_type)(  ) const;
            getMM2Atoms_function_type getMM2Atoms_function_value( &::SireOpenMM::TorchQMForce::getMM2Atoms );
            
            TorchQMForce_exposer.def( 
                "getMM2Atoms"
                , getMM2Atoms_function_value
                , bp::release_gil_policy()
                , "Get the vector of MM2 atoms.\nReturn:s\nA vector of MM2 atom indices.\n" );
        
        }
        { //::SireOpenMM::TorchQMForce::getNeighbourListFrequency
        
            typedef int ( ::SireOpenMM::TorchQMForce::*getNeighbourListFrequency_function_type)(  ) const;
            getNeighbourListFrequency_function_type getNeighbourListFrequency_function_value( &::SireOpenMM::TorchQMForce::getNeighbourListFrequency );
            
            TorchQMForce_exposer.def( 
                "getNeighbourListFrequency"
                , getNeighbourListFrequency_function_value
                , bp::release_gil_policy()
                , "Get the neighbour list frequency.\nReturn:s\nThe neighbour list frequency.\n" );
        
        }
        { //::SireOpenMM::TorchQMForce::getNumbers
        
            typedef ::QVector< int > ( ::SireOpenMM::TorchQMForce::*getNumbers_function_type)(  ) const;
            getNumbers_function_type getNumbers_function_value( &::SireOpenMM::TorchQMForce::getNumbers );
            
            TorchQMForce_exposer.def( 
                "getNumbers"
                , getNumbers_function_value
                , bp::release_gil_policy()
                , "Get the atomic numbers for the atoms in the QM region.\nReturn:s\nA vector of atomic numbers for the atoms in the QM region.\n" );
        
        }
        { //::SireOpenMM::TorchQMForce::operator=
        
            typedef ::SireOpenMM::TorchQMForce & ( ::SireOpenMM::TorchQMForce::*assign_function_type)( ::SireOpenMM::TorchQMForce const & ) ;
            assign_function_type assign_function_value( &::SireOpenMM::TorchQMForce::operator= );
            
            TorchQMForce_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "Assignment operator." );
        
        }
        { //::SireOpenMM::TorchQMForce::setLambda
        
            typedef void ( ::SireOpenMM::TorchQMForce::*setLambda_function_type)( double ) ;
            setLambda_function_type setLambda_function_value( &::SireOpenMM::TorchQMForce::setLambda );
            
            TorchQMForce_exposer.def( 
                "setLambda"
                , setLambda_function_value
                , ( bp::arg("lambda") )
                , bp::release_gil_policy()
                , "Set the lambda weighting factor\nPar:am lambda\nThe lambda weighting factor.\n" );
        
        }
        { //::SireOpenMM::TorchQMForce::setModulePath
        
            typedef void ( ::SireOpenMM::TorchQMForce::*setModulePath_function_type)( ::QString ) ;
            setModulePath_function_type setModulePath_function_value( &::SireOpenMM::TorchQMForce::setModulePath );
            
            TorchQMForce_exposer.def( 
                "setModulePath"
                , setModulePath_function_value
                , ( bp::arg("module_path") )
                , bp::release_gil_policy()
                , "Set the path to the serialised TorchScript module.\n" );
        
        }
        { //::SireOpenMM::TorchQMForce::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireOpenMM::TorchQMForce::typeName );
            
            TorchQMForce_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "Return the C++ name for this class." );
        
        }
        { //::SireOpenMM::TorchQMForce::what
        
            typedef char const * ( ::SireOpenMM::TorchQMForce::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireOpenMM::TorchQMForce::what );
            
            TorchQMForce_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "Return the C++ name for this class." );
        
        }
        TorchQMForce_exposer.staticmethod( "typeName" );
        TorchQMForce_exposer.def( "__copy__", &__copy__);
        TorchQMForce_exposer.def( "__deepcopy__", &__copy__);
        TorchQMForce_exposer.def( "clone", &__copy__);
        TorchQMForce_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireOpenMM::TorchQMForce >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TorchQMForce_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireOpenMM::TorchQMForce >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TorchQMForce_exposer.def_pickle(sire_pickle_suite< ::SireOpenMM::TorchQMForce >());
        TorchQMForce_exposer.def( "__str__", &pvt_get_name);
        TorchQMForce_exposer.def( "__repr__", &pvt_get_name);
    }

}
