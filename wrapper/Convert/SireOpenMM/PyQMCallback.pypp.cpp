// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "PyQMCallback.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMaths/vector.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/triclinicbox.h"

#include "openmm/serialization/SerializationNode.h"

#include "openmm/serialization/SerializationProxy.h"

#include "pyqm.h"

#include <QHash>

#include <QUuid>

#include <mutex>

#include "SireError/errors.h"

#include "SireMaths/vector.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/triclinicbox.h"

#include "openmm/serialization/SerializationNode.h"

#include "openmm/serialization/SerializationProxy.h"

#include "pyqm.h"

#include <QHash>

#include <QUuid>

#include <mutex>

SireOpenMM::PyQMCallback __copy__(const SireOpenMM::PyQMCallback &other){ return SireOpenMM::PyQMCallback(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireOpenMM::PyQMCallback&){ return "SireOpenMM::PyQMCallback";}

#include "Helpers/release_gil_policy.hpp"

void register_PyQMCallback_class(){

    { //::SireOpenMM::PyQMCallback
        typedef bp::class_< SireOpenMM::PyQMCallback > PyQMCallback_exposer_t;
        PyQMCallback_exposer_t PyQMCallback_exposer = PyQMCallback_exposer_t( "PyQMCallback", "A callback wrapper class to interface with external QM engines\nvia the CustomCPPForceImpl.", bp::init< >("Default constructor.") );
        bp::scope PyQMCallback_scope( PyQMCallback_exposer );
        PyQMCallback_exposer.def( bp::init< bp::api::object, bp::optional< QString > >(( bp::arg("arg0"), bp::arg("name")="" ), "Constructor\nPar:am py_object\nA Python object that contains the callback function.\n\nPar:am name\nThe name of a callback method that take the following arguments:\n- numbers_qm: A list of atomic numbers for the atoms in the ML region.\n- charges_mm: A list of the MM charges in mod electron charge.\n- xyz_qm: A list of positions for the atoms in the ML region in Angstrom.\n- xyz_mm: A list of positions for the atoms in the MM region in Angstrom.\n- idx_mm: A list of indices for the MM atoms in the QM/MM region.\nThe callback should return a tuple containing:\n- The energy in kJmol.\n- A list of forces for the QM atoms in kJmolnm.\n- A list of forces for the MM atoms in kJmolnm.\nIf empty, then the object is assumed to be a callable.\n") );
        { //::SireOpenMM::PyQMCallback::call
        
            typedef ::boost::tuples::tuple< double, QVector< QVector< double > >, QVector< QVector< double > >, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::SireOpenMM::PyQMCallback::*call_function_type)( ::QVector< int >,::QVector< double >,::QVector< QVector< double > >,::QVector< QVector< double > >,::QVector< int > ) const;
            call_function_type call_function_value( &::SireOpenMM::PyQMCallback::call );
            
            PyQMCallback_exposer.def( 
                "call"
                , call_function_value
                , ( bp::arg("numbers_qm"), bp::arg("charges_mm"), bp::arg("xyz_qm"), bp::arg("xyz_mm"), bp::arg("idx_mm") )
                , bp::release_gil_policy()
                , "Call the callback function.\nPar:am numbers_qm\nA vector of atomic numbers for the atoms in the ML region.\n\nPar:am charges_mm\nA vector of the charges on the MM atoms in mod electron charge.\n\nPar:am xyz_qm\nA vector of positions for the atoms in the ML region in Angstrom.\n\nPar:am xyz_mm\nA vector of positions for the atoms in the MM region in Angstrom.\n\nPar:am idx_mm A vector of indices for the MM atoms in the QM/MM region. Note that len(idx_mm) <= len(charges_mm) since it only contains the indices of true MM atoms, not link atoms or virtual charges.\n\nReturn:s\nA tuple containing:\n- The energy in kJmol.\n- A vector of forces for the QM atoms in kJmolnm.\n- A vector of forces for the MM atoms in kJmolnm.\n" );
        
        }
        { //::SireOpenMM::PyQMCallback::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireOpenMM::PyQMCallback::typeName );
            
            PyQMCallback_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "Return the C++ name for this class." );
        
        }
        { //::SireOpenMM::PyQMCallback::what
        
            typedef char const * ( ::SireOpenMM::PyQMCallback::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireOpenMM::PyQMCallback::what );
            
            PyQMCallback_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "Return the C++ name for this class." );
        
        }
        PyQMCallback_exposer.staticmethod( "typeName" );
        PyQMCallback_exposer.def( "__copy__", &__copy__);
        PyQMCallback_exposer.def( "__deepcopy__", &__copy__);
        PyQMCallback_exposer.def( "clone", &__copy__);
        PyQMCallback_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireOpenMM::PyQMCallback >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PyQMCallback_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireOpenMM::PyQMCallback >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PyQMCallback_exposer.def_pickle(sire_pickle_suite< ::SireOpenMM::PyQMCallback >());
        PyQMCallback_exposer.def( "__str__", &pvt_get_name);
        PyQMCallback_exposer.def( "__repr__", &pvt_get_name);
    }

}
